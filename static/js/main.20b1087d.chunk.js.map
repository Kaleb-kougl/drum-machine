{"version":3,"sources":["components/DrumButton.js","components/DrumButtonsView.js","components/ToggleSwitch.js","components/SoundView.js","components/VolumeSlider.js","components/ControlsView.js","components/Card.js","components/DrumMachineView.js","App.js","serviceWorker.js","index.js"],"names":["DrumButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyDown","event","keyCode","attributes","keyboardKey","handleClick","document","getElementById","id","volume","addEventListener","bind","removeEventListener","powerOn","audio","pause","changeLastPlayedSound","name","currentTime","play","_this2","react_default","a","createElement","className","style","styles","onClick","onKeyDown","console","log","src","url","Component","borderColor","borderWidth","borderStyle","color","width","height","boxShadow","backgroundColor","borderRadius","display","justifyContent","alignItems","DrumButtonsView","soundBank","bank","buttons","i","push","DrumButton_DrumButton","key","soundsArray","flex","flexWrap","alignContent","padding","ToggleSwitch","side","variableToToggle","textAlign","margin","paddingLeft","paddingRight","changeState","SoundView","lastPlayedSound","VolumeSlider","storeValue","assertThisInitialized","changeVolume","target","value","type","min","max","onChange","marginTop","ControlsView","flexDirection","ToggleSwitch_ToggleSwitch","changePower","SoundView_SoundView","VolumeSlider_VolumeSlider","changeSoundBank","Card","state","preProps","prevState","setState","minWidth","minHeight","maxWidth","alignSelf","justifySelf","DrumButtonsView_DrumButtonsView","ControlsView_ControlsView","DrumMachineView","position","Card_Card","App","DrumMachineView_DrumMachineView","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20b1087d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass DrumButton extends Component {\n    constructor(props) {\n        super(props);\n    }\n    \n    componentDidUpdate() {\n        let audio = document.getElementById(this.props.attributes.id);\n        audio.volume = (this.props.volume) / 100.0;\n    }\n\n    componentDidMount() {\n        let audio = document.getElementById(this.props.attributes.id);\n        audio.volume = (this.props.volume) / 100.0;\n        document.addEventListener('keydown', this.handleKeyDown.bind(this));\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown.bind(this));\n    }\n\n    handleClick() {\n        if (this.props.powerOn) {\n            let audio = document.getElementById(this.props.attributes.id);\n            audio.pause();\n            this.props.changeLastPlayedSound(this.props.attributes.name);\n            audio.currentTime = 0;\n            audio.play();\n        }\n    }\n\n    handleKeyDown = (event) => {\n        if ( event.keyCode === this.props.attributes.keyboardKey) {\n            this.handleClick();\n        }\n    }\n\n    render() { \n\n        return(\n            <div\n                id={this.props.attributes.name} \n                className=\"drum-pad\"\n                style={ styles }\n                onClick={() => {\n                    this.handleClick();\n                }}\n                onKeyDown={() => {console.log('key pressed!')}}\n            >\n            <audio id={this.props.attributes.id} className='clip' src={this.props.attributes.url} volume={0.1}/>\n            {this.props.attributes.id}\n            </div>\n        )\n    }\n};\n\nconst styles = {\n    borderColor: 'rgb( 67, 240, 61 )',\n    borderWidth: '1px',\n    borderStyle: 'solid',\n    color: 'rgb( 67, 240, 61 )',\n    width: '25%',\n    height: '25%',\n    boxShadow: '5px 5px 10px 0px rgba(0,0,0,0.75)',\n    backgroundColor: 'black',\n    borderRadius: '5%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n}\n\nexport { DrumButton };","import React from 'react';\nimport { DrumButton } from './DrumButton';\n\nconst DrumButtonsView = (props) => {\n  if (props.soundBank) {\n    var bank = 0;\n  } else {\n    bank = 1; \n  }\n  let buttons = [];\n  for (let i = 0; i < 9; i++) {\n    buttons.push( <DrumButton \n      key={i}\n      attributes={props.soundsArray[bank][i]}\n      volume={props.volume}\n      powerOn={props.powerOn}\n      changeLastPlayedSound={props.changeLastPlayedSound} />);\n  }\n\n  return (\n    <div style={{ \n        flex: 1,\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around',\n        alignContent: 'space-around',\n        padding: 0,\n    }}>\n    {buttons}\n    </div>\n  ); \n};\n\nexport { DrumButtonsView };","import React from 'react';\n\nconst ToggleSwitch = (props) => {\n    let side = 'flex-start';\n    \n    if (!props.variableToToggle) {\n        side = 'flex-end';\n    }\n\n    return(\n        <div style={{textAlign: 'center', margin: '5px', color: 'rgb( 67, 240, 61 )',}}>\n            {props.display}\n            <div style={{\n                width: '60px',\n                height: '36px',\n                backgroundColor: 'black',\n                borderWidth: '1px',\n                borderStyle: 'solid',\n                borderColor: 'rgb( 67, 240, 61 )',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: side,\n                paddingLeft: '3px',\n                paddingRight: '3px',            \n                }}\n                onClick={() => props.changeState(!props.variableToToggle)}>\n\n                <div style={{\n                    width: '40%',\n                    height: '80%',\n                    backgroundColor: 'rgb( 67, 240, 61 )',\n                }} /> \n            </div>\n        </div>\n    );\n\n}\n\nexport { ToggleSwitch };","import React from 'react';\n\nconst SoundView = (props) => {\n    \n    return (\n        <div style={{\n            height: '40px',\n            width: '150px',\n            backgroundColor: 'black',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            borderColor: 'rgb( 67, 240, 61 )',\n            borderWidth: '1px',\n            borderStyle: 'solid',\n            color: 'rgb( 67, 240, 61 )'\n            }}\n            id=\"display\"\n        >\n            {props.lastPlayedSound}\n        </div>\n    );\n}\n\nexport { SoundView }; ","import React, { Component } from 'react';\n\nclass VolumeSlider extends Component{\n    constructor(props) {\n        super(props);\n        this.storeValue = this.storeValue.bind(this);\n    }\n\n    storeValue(event) {\n        this.props.changeVolume(event.target.value);\n    };\n    \n    render() {\n        return (\n            <div className=\"slideContainer\" style={{textAlign: 'center',}}>\n                <input type=\"range\" min=\"1\" max=\"100\" className=\"slider\" id=\"myRange\"\n                    value={this.props.volume}\n                    onChange={ this.storeValue }\n                />\n                <p style={{marginTop: 0,}}>Volume: {this.props.volume}</p>\n            </div>\n        );\n    }\n}\n\nexport { VolumeSlider };\n","import React from 'react';\nimport { ToggleSwitch } from './ToggleSwitch';\nimport { SoundView } from './SoundView';\nimport { VolumeSlider } from './VolumeSlider';\n\nconst ControlsView = (props) => {\n \n  return (\n    <div style={{ \n        flex: 1,\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        color: 'rgb( 67, 240, 61 )', \n    }}>\n    <ToggleSwitch \n      variableToToggle={props.powerOn}\n      changeState={props.changePower}\n      display=\"Power\"\n    />\n    <SoundView\n      lastPlayedSound={props.lastPlayedSound} \n    />\n    <VolumeSlider\n      volume={props.volume}\n      changeVolume={props.changeVolume} \n    />\n    <ToggleSwitch\n      variableToToggle={props.soundBank}\n      changeState={props.changeSoundBank}\n      display=\"Bank\" \n    />\n    </div>\n  ); \n\n};\n\nexport { ControlsView };","import React, { Component } from 'react';\nimport { DrumButtonsView } from './DrumButtonsView';\nimport { ControlsView } from './ControlsView';\n\nclass Card extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            powerOn: true,\n            lastPlayedSound: '',\n            volume: 50,\n            soundBank: true,\n            soundsArray: [[\n                {\n                    id:'Q',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3',\n                    keyboardKey: 81,\n                    name: 'Heater 1',\n                },\n                {\n                    id:'W',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3',\n                    keyboardKey: 87,\n                    name: 'Heater 2',\n                },\n                {\n                    id:'E',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3',\n                    keyboardKey: 69,\n                    name: 'Heater 3',\n                },\n                {\n                    id:'A',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3',\n                    keyboardKey: 65,\n                    name: 'Heater 4',\n                },\n                {\n                    id:'S',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3',\n                    keyboardKey: 83,\n                    name: 'Heater 5',\n                },\n                {\n                    id:'D',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3',\n                    keyboardKey: 68,\n                    name: 'High Hat',\n                },\n                {\n                    id:'Z',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3',\n                    keyboardKey: 90,\n                    name: 'Kick/High Hat',\n                },\n                {\n                    id:'X',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3',\n                    keyboardKey: 88,\n                    name: 'Kick',\n                },\n                {\n                    id:'C',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3',\n                    keyboardKey: 67,\n                    name: 'Closed HH',\n                },\n            ], [\n                {\n                    id:'Q',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3',\n                    keyboardKey: 81,\n                    name: 'Chord 1',\n                },\n                {\n                    id:'W',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3',\n                    keyboardKey: 87,\n                    name: 'Chord 2',\n                },\n                {\n                    id:'E',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3',\n                    keyboardKey: 69,\n                    name: 'Chord 3',\n                },\n                {\n                    id:'A',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3',\n                    keyboardKey: 65,\n                    name: 'Shaker',\n                },\n                {\n                    id:'S',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3',\n                    keyboardKey: 83,\n                    name: 'Open HH',\n                },\n                {\n                    id:'D',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3',\n                    keyboardKey: 68,\n                    name: 'Closed HH',\n                },\n                {\n                    id:'Z',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3',\n                    keyboardKey: 90,\n                    name: 'Punchy Kick',\n                },\n                {\n                    id:'X',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3',\n                    keyboardKey: 88,\n                    name: 'Side Stick',\n                },\n                {\n                    id:'C',\n                    url:'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3',\n                    keyboardKey: 67,\n                    name: 'Snare',\n                },\n            ]\n            ]\n        }\n    }\n\n    componentDidUpdate(preProps, prevState) {\n        if (prevState !== this.state) {\n            if (this.state.powerOn !== prevState.powerOn) {\n                this.setState({lastPlayedSound: ''})\n            }\n        }\n    }\n    \n    render() {\n        return(\n            <div style={{             \n                minWidth: '40em',\n                minHeight: '20em',\n                maxWidth: '40em',                 \n                backgroundColor: 'black',  \n                alignSelf: 'center', \n                justifySelf: 'center',\n                padding: '0px', \n                boxShadow: '10px 10px 5px 0px rgba(0,0,0,0.75)',\n                display: \"flex\",\n                flexDirection: \"row\",\n                borderColor: 'rgb( 67, 240, 61 )',\n                borderWidth: '5px',\n                borderStyle: 'solid'\n                }}\n                id = 'drum-machine'\n            >\n            <DrumButtonsView \n                soundsArray={this.state.soundsArray}\n                volume={this.state.volume}\n                powerOn={this.state.powerOn}\n                soundBank={this.state.soundBank}\n                changeLastPlayedSound={(lastPlayedSound) => this.setState({lastPlayedSound})}\n            />\n            <ControlsView \n                powerOn={this.state.powerOn}\n                changePower={(powerOn) => this.setState({powerOn})}\n                volume={this.state.volume}\n                changeVolume={(volume) => this.setState({volume})}\n                lastPlayedSound={this.state.lastPlayedSound}\n                soundBank={this.state.soundBank}\n                changeSoundBank={(soundBank) => this.setState({soundBank})}               \n            />\n            </div>\n        );\n    }\n}\n\nexport { Card };","import React, { Component } from 'react';\nimport { Card } from './Card'\n\nclass DrumMachineView extends Component {\n    render () {\n        return (\n            <div style={{\n                flex: 1,\n                backgroundColor: 'rgb(141, 141, 141)',                \n                display: 'flex',\n                flexDirection: \"column\",\n                justifyContent: 'center',                \n                minHeight: '100%',\n                minWidth: '100%',\n                position: 'absolute'\n            }}>\n                <Card /> \n            </div>\n        );\n    }\n}\n\nexport { DrumMachineView }; ","import React, { Component } from 'react';\nimport { DrumMachineView } from './components/DrumMachineView';\n\nclass App extends Component {\n  render() {\n    return (\n      <DrumMachineView />\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}